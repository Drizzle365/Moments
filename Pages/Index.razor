@page "/"
@using Moments.Model
@using Moments.Service
@inject IFreeSql Db;
@inject IJSRuntime JsRuntime
@inject ArticleService ArticleService
@inject ConfigService ConfigService
<div id="main">
    <div class="main-content">
        <div class="header">
            <div class="header-top">
                <span class="header-left">
                    <span @onclick='() => { JsRuntime.InvokeVoidAsync("scrollToTop"); }'>@ConfigService.Get("Title")</span>
                </span>
                <span class="header-right" @onclick="() => _info = true">
                    <div style="color: white;margin-right: 10px">
                        <span class="m-1">
                            <i class="fas fa-user-friends"></i>朋友：@_friends.Count
                        </span>
                        <span class="m-1">
                            <i class="fas fa-palette"></i>
                            文章：@_countArticle
                        </span>
                    </div>
                </span>
            </div>
            <img class="img-fluid" style="height: 345px" src="@ConfigService.Get("Banner")" alt="">
            <div class="profile">
                <div id="name">@ConfigService.Get("Name")</div>
                <img src="@ConfigService.Get("Avatar")" alt="头像">
            </div>
            <div class="says">@ConfigService.Get("Sentence")</div>
        </div>
        <div id="pjax-content">
            <div class="main-container">
                @foreach (var item in _nodeList)
                {
                    <div class="item">
                        <div class="left">
                            <img @onclick="() => {Task.FromResult(Select(item.FriendId)); _friendInfo = true;}" src="@GetAvatar(item.FriendId)" alt="头像">
                        </div>
                        <div class="right">
                            <div class="name">
                                <a style="color: #576b95" href="@GetBlogLink(item.FriendId)" target="_blank">@GetName(item.FriendId)</a>
                            </div>
                            <div class="content">
                                <b>@item.Title</b>
                                @(new MarkupString(item.Description ?? "暂无阅览，请查看原文"))
                            </div>
                            <div>
                                <div class="time">@item.PubDate.ToString("MM月dd日 tt hh:mm")</div>
                                <a href="@item.Link" target="_blank" class="more">查看原文</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div style="text-align: center;padding: 10px">
            <MButton
                Outlined
                OnClick="GetMore"
                Elevation="2">
                <MIcon>fa:fas fa-solid fa-infinity</MIcon>
                加载更多
            </MButton>
        </div>
    </div>
</div>
<PModal @bind-Value="_info"
        Title="快捷面板"
        Width="500"
        OnCancel="() => _info = false">
    <MButton Depressed Link Href="/Apply" Color="success">
        申请加入
    </MButton>
    <MButton Depressed Link Href="/Admin" Color="primary">
        进入后台
    </MButton>
    <MButton Depressed Link Href="https://github.com/Drizzle365/Moments" Target="_blank" Color="primary">
        <MIcon>mdi:mdi-github</MIcon>
        开源地址
    </MButton>
</PModal>
<PModal @bind-Value="_friendInfo"
        Title="最近动态"
        Width="500"
        OnCancel="() => _friendInfo = false">
    <div style="text-align: center">
        <MAvatar Size="84">
            <MImage Src="@_select?.Avatar" Alt="Avatar"></MImage>
        </MAvatar>
        <div>
            <MChip Class="ma-2"
                   Color="primary">
                @_select?.Name
            </MChip>
        </div>
    </div>
    <MList Subheader
           TwoLine Elevation="0">
        @foreach (var item in _selectArticles)
        {
            <MListItem Href="@item.Link" Target="_blank" Link>
                <MListItemContent>
                    <MListItemTitle>@item.Title</MListItemTitle>
                    <MListItemSubtitle>@item.Description</MListItemSubtitle>
                </MListItemContent>
                <MListItemAction>
                    <MChip Class="ma-2" Small>
                        @item.PubDate.ToString("MM月dd日")
                    </MChip>
                </MListItemAction>
            </MListItem>
        }
    </MList>
</PModal>

@code{
    long _countArticle;
    bool _info;
    bool _friendInfo;
    List<Article> _nodeList = new();
    List<Friend> _friends = new();
    int _p = 1;
    Friend? _select;
    List<Article> _selectArticles = new List<Article>();

    protected override async Task OnInitializedAsync()
    {
        _countArticle = await Db.Select<Article>().CountAsync();
        _nodeList = await Db.Select<Article>().OrderBy("PubDate DESC")
            .Limit(10)
            .ToListAsync();
        _friends = await Db.Select<Friend>().ToListAsync();
    }

    string GetName(int? id)
    {
        return _friends.Find(x => x.FriendId == id)?.Name ?? "未命名";
    }

    string GetAvatar(int? id)
    {
        return _friends.Find(x => x.FriendId == id)?.Avatar ?? "https://gravatar.loli.net/avatar/c243c9fe3d177bc3f656ff4554e4cbb0?s=100&d=mm&r=g";
    }

    string GetBlogLink(int? id)
    {
        return _friends.Find(x => x.FriendId == id)?.Link ?? "https://dearain.cn";
    }

    async Task GetMore()
    {
        var more = await Db.Select<Article>().OrderBy("PubDate DESC")
            .Offset(_p * 10)
            .Limit(10)
            .ToListAsync();
        _nodeList.AddRange(more);
        _p++;
    }

    async Task Select(int target)
    {
        var f = _friends.Find(x => x.FriendId == target);
        _select = f;
        _selectArticles = await ArticleService.ListAsync(target);
    }

}